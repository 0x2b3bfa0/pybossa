# -*- coding: utf8 -*-
# This file is part of PyBossa.
#
# Copyright (C) 2013 SF Isle of Man Limited
#
# PyBossa is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# PyBossa is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with PyBossa.  If not, see <http://www.gnu.org/licenses/>.

#import os
#from glob import iglob
import logging
import datetime
#import time
import json
import uuid

from werkzeug import generate_password_hash, check_password_hash
import flask.ext.login
from sqlalchemy import BigInteger, Integer, Boolean, Unicode,\
        Float, UnicodeText, Text, String
from sqlalchemy.schema import Table, MetaData, Column, ForeignKey
from sqlalchemy.orm import relationship, backref, class_mapper
from sqlalchemy.types import MutableType, TypeDecorator
from sqlalchemy import event, text
from sqlalchemy.engine import reflection
from sqlalchemy import create_engine
from sqlalchemy.schema import (
    MetaData,
    Table,
    DropTable,
    ForeignKeyConstraint,
    DropConstraint,
    )

from pybossa.core import db
from pybossa.util import pretty_date
from util import DomainObject, make_timestamp, JSONType



class App(db.Model, DomainObject):
    '''A microtasking Application to which Tasks are associated.
    '''
    def __repr__(self):
        return "%s(%s)" % (self.__class__.__name__, self.id)

    __tablename__ = 'app'
    #: Unique id for this app (autogenerated)
    id = Column(Integer, primary_key=True)
    #: created timestamp (automatically set)
    created = Column(Text, default=make_timestamp)
    #: Name / Title for this Application
    name = Column(Unicode(length=255), unique=True, nullable=False)
    #: slug used in urls etc
    short_name = Column(Unicode(length=255), unique=True, nullable=False)
    #: description
    description = Column(Unicode(length=255), nullable=False)
    #: long description
    long_description = Column(UnicodeText)
    #: Allow anonymous contributors to participate in the application tasks
    allow_anonymous_contributors = Column(Boolean, default=True)
    ## TODO: What is this?
    long_tasks = Column(Integer, default=0)
    #: Boolean integer (0,1) indicating that \
    #: this App should be hidden from everyone but Administrators
    hidden = Column(Integer, default=0)
    #: owner (id)
    owner_id = Column(Integer, ForeignKey('user.id'), nullable=False)
    ## Following may not be relevant ...
    ## TODO: ask about these
    #: estimate of time it should take for user
    time_estimate = Column(Integer, default=0)
    #: time limit for a task
    time_limit = Column(Integer, default=0)
    calibration_frac = Column(Float, default=0)
    bolt_course_id = Column(Integer, default=0)
    #: category(id)
    category_id = Column(Integer, ForeignKey('category.id'))
    #: Standard JSON blob for additional data. This field also
    #: stores information used by PyBossa, such as the app thumbnail,
    #: the schedule mode, and the task presenter.
    #:
    #:    {
    #:       task_presenter: [html/javascript],
    #:       thumbnail: [url to the thumbnail image]
    #:       sched: [scheduling mode]
    #:    }
    #:
    info = Column(JSONType, default=dict)

    ## Relationships
    #: `Task`s for this app.`
    tasks = relationship('Task', cascade='all, delete, delete-orphan', backref='app')
    #: `TaskRun`s for this app.`
    task_runs = relationship('TaskRun', backref='app',
                             cascade='all, delete-orphan',
                             order_by='TaskRun.finish_time.desc()')
    #: `Featured` or not for this app
    featured = relationship('Featured', cascade='all, delete, delete-orphan')
    #: `category` or not for this app
    category = relationship('Category')
    blogposts = relationship('Blogpost', cascade='all, delete-orphan', backref='app')


@event.listens_for(App, 'before_update')
@event.listens_for(App, 'before_insert')
def empty_string_to_none(mapper, conn, target):
    if target.name == '':
        target.name = None
    if target.short_name == '':
        target.short_name = None
    if target.description == '':
        target.description = None
